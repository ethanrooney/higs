/*********************************************************************
Created by S. Henshaw 3/31/10

This creats a G4AssemblyVolume which is the Core of a HINDA.  I have 
Included the PMT's in this Assembly

The Core Diameter here is Assumed to be 10" and the length is 10"

*********************************************************************/
#include "HINDACore.hh"
#include "HINDASD.hh"
#include "G4UnitsTable.hh"

#include "G4Tubs.hh"
#include "G4UnionSolid.hh"
#include "G4Polycone.hh"
#include "G4SubtractionSolid.hh"
#include "G4LogicalVolume.hh"
#include "G4VPhysicalVolume.hh"
#include "G4AssemblyVolume.hh"
#include "G4PVPlacement.hh"
#include "G4Material.hh"
#include "G4VisAttributes.hh"
#include "G4UserLimits.hh"
#include "G4RunManager.hh"
#include "G4GeometryManager.hh"
#include "AllMaterials.hh"
#include "MoreUnits.hh"


const G4double HINDACore::CorePMTInnerR[]   = {3.5*cm, 3.5*cm, 3.5*cm, 3.5*cm, 0.*cm, 0.*cm};
const G4double HINDACore::CorePMTOuterR[]   = {4.24*cm, 4.24*cm, 3.64*cm, 3.64*cm, 3.64*cm, 3.64*cm};
const G4double HINDACore::CorePMTZPlanes[]  = {0.*cm, 0.8*cm, 0.8*cm, 16.25158*cm, 16.25158*cm, 16.45158*cm};

HINDACore::HINDACore(G4String CoreName)
{
  fClassName="HINDACore";
  fMethodName="HINDACore";
  fCoreName=CoreName;
  G4cout<<"-----"<<fClassName<<"::"<<fMethodName<<"-----"<<G4endl;
  G4cout<<"\tConstructing Core with Name:  "<<fCoreName.data()<<G4endl;

  CoreAssembly      =new G4AssemblyVolume();

  //Setting up Instance of Sensitive Detector Class
  HINDASDPtr = new HINDASD("/HINDA/HINDASDPtr");

  SetDimensions();
  BuildCore();
  BuildPMT();
  SetVisAtt();
  AssembleParts();
  MakeSensitive();

}

HINDACore::~HINDACore()
{
  //Logical Volumes
  delete logic_NaI;
  delete logic_CorePMT;
  delete logic_QuartzWindow;
  delete logic_CoreCan;
    
  //Full Detector Assembly
  delete CoreAssembly;
}

void  HINDACore::SetDimensions()
{
  //View Slice of Detector 90 and span to 270 
  //  StartAngle =  90.*deg;
  //  SpanAngle  =  180.*deg;


  //For Physics Tests
  StartAngle =  0.*deg;
  SpanAngle  =  360.*deg;

  //Dimensions defined by S. Henshaw (Should be verified with St. Gobain Paperwork)

  //Dimensions of Al shell around Crystal
  CanThickness=0.125*in;
  CanShellOuterDiameter=10.125*in;
  CanShellOuterRadius=CanShellOuterDiameter/2.0;
  CanShellInnerRadius=CanShellOuterRadius-CanThickness;
  CanShellHeight=10*in;
  CanShellHalfHeight=CanShellHeight/2.0;
  
  //Dimesions Al Front Cover of Core Detector
  CanFrontThickness=CanThickness;
  CanFrontRadius=CanShellOuterRadius;
  CanFrontHalfHeight=CanFrontThickness/2.0;
  
  //Dimension of Al Back Plate (with Quartz window)
  BackPlateThickness=0.5*in;
  BackPlateRadius=CanShellOuterRadius+0.25*in;
  BackPlateQuartzRadius=CanShellInnerRadius;
  BackPlateHalfHeight=BackPlateThickness/2.0;
  
  //Dimensions of NaI Crystal
  NaIDiameter=10*in;
  NaIRadius=NaIDiameter/2.0;
  //NaILength=10*in;
  if (fCoreName == "JONI") {
    NaILength=11*in;
  } else if (fCoreName == "LINDA") {
    NaILength=12*in;
  } else if (fCoreName == "SUSAN") {
    NaILength=12*in;
  } else {
    NaILength=10*in;
  }
  NaIHalfHeight=NaILength/2.0;

}

void HINDACore::BuildCore()
{
  //Solids for Al Can
  G4Tubs *CanShell=new G4Tubs("CanShell",CanShellInnerRadius,CanShellOuterRadius,CanShellHalfHeight,StartAngle,SpanAngle);
  G4Tubs *CanFront=new G4Tubs("CanFront",0,CanFrontRadius,CanFrontHalfHeight,StartAngle,SpanAngle);
  G4Tubs *CanBackAl=new G4Tubs("CanBackAl",BackPlateQuartzRadius,BackPlateRadius,BackPlateHalfHeight,StartAngle,SpanAngle);
  
  //Now we Union these together to make one object
  G4Transform3D FrontMove= G4Transform3D(G4RotationMatrix(),G4ThreeVector(0.,0.,-CanShellHalfHeight-1.01*CanFrontHalfHeight) );
  G4UnionSolid *CanShellAndFront=new G4UnionSolid("Shell+Front",CanShell,CanFront,FrontMove);

  G4Transform3D BackMove= G4Transform3D(G4RotationMatrix(),G4ThreeVector(0.,0.,(CanShellHalfHeight+1.01*BackPlateHalfHeight)) );
  G4UnionSolid *Can=new G4UnionSolid("CoreCan",CanShellAndFront,CanBackAl,BackMove);
  
  //Solid for Back Quartz Windows
  G4Tubs *QuartzWindow=new G4Tubs("QuartzWindow",0,BackPlateQuartzRadius,BackPlateHalfHeight,StartAngle,SpanAngle);

  //Solid for NaI Crystal
  G4Tubs *NaI=new G4Tubs("NaI",0,NaIRadius,NaIHalfHeight,StartAngle,SpanAngle);



  //Definition of Logical Volumes
  logic_CoreCan=new G4LogicalVolume(Can,
				  AllMaterials::GetMaterial("Aluminium"),
				  fCoreName+"_l_CoreAlCan",0,0,0);
  logic_QuartzWindow=new G4LogicalVolume(QuartzWindow,
					 AllMaterials::GetMaterial("QuartzGlass"),
					 fCoreName+"_l_CoreQuartzWindow",0,0,0);

  logic_NaI=new G4LogicalVolume(NaI,
				       AllMaterials::GetMaterial("NaI"),
				       fCoreName+"_l_NaI",0,0,0);

}


void HINDACore::BuildPMT()
{
  //Solid for PMT (Values are set at Top of this file (HINDACore.cc)
  G4Polycone *solid_CorePMT = new G4Polycone("s_core_PMT", 0,360*deg, 
				  CorePMTNPlanesZ, CorePMTZPlanes, 
				  CorePMTInnerR, CorePMTOuterR);

  //Defintion of Logical Volume
  logic_CorePMT = new G4LogicalVolume(solid_CorePMT, 
				       AllMaterials::GetMaterial("Air"), 
				       fCoreName+"_l_CorePMT", 0, 0, 0);  


}

void HINDACore::AssembleParts()
{
  //Define Positions of Center of Parts Relative to Center of Assembly
  G4ThreeVector posNaI = G4ThreeVector(0,0,0);
  G4ThreeVector posCoreCan = G4ThreeVector(0,0,0);
  G4ThreeVector posQuartzWindow = G4ThreeVector(0,0,(CanShellHalfHeight+BackPlateHalfHeight));
  G4ThreeVector posCorePMT[NumCorePMTs];
  for(G4int i=0; i<NumCorePMTs; i++)
    {  
      if(i==0)
	posCorePMT[i]  = G4ThreeVector(0.*mm, 0.*mm, posQuartzWindow.getZ()+BackPlateHalfHeight);
      else
	posCorePMT[i]  = G4ThreeVector(BackPlateQuartzRadius-CorePMTOuterR[0], 
				       0.*mm,
				       posQuartzWindow.getZ()+BackPlateHalfHeight );
      
      posCorePMT[i].rotateZ(i*360./(NumCorePMTs-1.0)*deg);
    }

  //Define Transforms for Placement in Assembly
  G4Transform3D Transform_NaI= G4Transform3D(G4RotationMatrix(), posNaI);
  G4Transform3D Transform_CoreCan= G4Transform3D(G4RotationMatrix(), posCoreCan);
  G4Transform3D Transform_QuartzWindow= G4Transform3D(G4RotationMatrix(), posQuartzWindow);
  G4Transform3D Transform_CorePMT[NumCorePMTs];
  for(G4int i=0; i<NumCorePMTs; i++)
    Transform_CorePMT[i]=G4Transform3D(G4RotationMatrix(), posCorePMT[i]);
  
  //Place the logical volumes into the Assembly
  CoreAssembly->AddPlacedVolume(logic_CoreCan, Transform_CoreCan);
  CoreAssembly->AddPlacedVolume(logic_NaI, Transform_NaI);
  CoreAssembly->AddPlacedVolume(logic_QuartzWindow, Transform_QuartzWindow);
  for(G4int i=0; i<NumCorePMTs; i++)
    //if(!(posCorePMT[i].getPhi() >-5*deg && posCorePMT[i].getPhi() <StartAngle)  )//Uncomment if you want to slice det for viewing purposes
      CoreAssembly->AddPlacedVolume(logic_CorePMT, Transform_CorePMT[i]);
  


}

void HINDACore::SetVisAtt()
{
  //Setting Visualization Attributes for the Core Assembly
  G4VisAttributes* AlCanVisAtt= new G4VisAttributes(G4Colour::Grey());
  AlCanVisAtt->SetForceSolid(true);
  logic_CoreCan ->SetVisAttributes(AlCanVisAtt);

  G4VisAttributes* NaIVisAtt= new G4VisAttributes(G4Colour::Red());
  NaIVisAtt->SetForceSolid(true);
  logic_NaI->SetVisAttributes(NaIVisAtt);

  G4VisAttributes* QuartzVisAtt= new G4VisAttributes(G4Colour::Blue());
  QuartzVisAtt->SetForceSolid(true);
  logic_QuartzWindow->SetVisAttributes(QuartzVisAtt);

  G4VisAttributes* PMTVisAtt= new G4VisAttributes(G4Colour::Grey());
  PMTVisAtt->SetForceSolid(true);
  logic_CorePMT->SetVisAttributes(PMTVisAtt);
 


}

void HINDACore::MakeSensitive(void)
{
  IsCoreSensitive=true;
  fNumSensitiveVols=1;
  logic_NaI->SetSensitiveDetector(HINDASDPtr);
  fSensitiveLogVolName[0]=logic_NaI->GetName();
  
}



void HINDACore::PlaceCoreAssembly(G4LogicalVolume* logicMother,G4Transform3D Transform)
{
  fMethodName="PlaceCoreAssembly";

  G4cout<<"-----"<<fClassName<<"::"<<fMethodName<<"-----"<<G4endl;
  G4cout<<"\t Placing: "<<fCoreName<<" with Components:"<<G4endl;

  //Places the Assembly at the postion defined by pos in the logicMother volume
  CoreAssembly->MakeImprint(logicMother,Transform,0,false);


  /*//No longer needed as the Name of the core is included in constructor and logical vol names
//This Sets the names and copy numbers of the segments
  VolumesIterator iter=CoreAssembly->GetVolumesIterator();
  G4int VolTypeCount[fNLogVols];
  for(G4int i=0;i<fNLogVols;i++)
    VolTypeCount[i]=0;

  for(G4int i=0; i<(G4int)CoreAssembly->TotalImprintedVolumes(); i++,iter++)
    {
      G4VPhysicalVolume *pv= *iter;
      G4LogicalVolume *lv=pv->GetLogicalVolume();
      G4String VolName=lv->GetName();
      for(G4int j=0;j<fNLogVols;j++)
	{
	  if(VolName.contains(LogVolNames[j].data()))
	    {
	      std::stringstream strCopyNo;
	      strCopyNo<<VolTypeCount[j];
	      G4String NewPVName=fCoreName + "_" +LogVolNames[j] +"_"+strCopyNo.str();
	      pv->SetName(NewPVName);
	      pv->SetCopyNo(VolTypeCount[j]);
	      G4cout<<"\t\tComponent:  "<<pv->GetName()<<" Copy #: "<<pv->GetCopyNo()<<G4endl;
	      VolTypeCount[j]++;
	    }
	}
    }
  */
}
