
#include "HINDASD.hh"
#include "DataManager.hh"

#include "G4HCofThisEvent.hh"
#include "G4Step.hh"
#include "G4ThreeVector.hh"
#include "G4SDManager.hh"
#include "G4RunManager.hh"

#include "G4ios.hh"

#include "G4UIcommand.hh"
#include "G4VVisManager.hh"
#include "G4Circle.hh"
#include "G4Colour.hh"
#include "G4VisAttributes.hh"

#include "TTree.h"
#include "TVector3.h"

//-----------------------------------------------------------------------------
HINDASD::HINDASD(G4String name)
  :G4VSensitiveDetector(name), fTrackIsNew(true), Nsteps_per_track(0)
{
  fClassName="HINDASD";
  fMethodName="HINDASD";
  G4cout<<"-----"<<fClassName<<"::"<<fMethodName<<"-----"<<G4endl;
  data = DataManager::GetInstance();
  
}

//----------------------------------------------------------------------------
HINDASD::~HINDASD()
{

}

//------------------------------------------------------------------------------
void HINDASD::Initialize(G4HCofThisEvent*)
{//this is called at the beginning of every event

}

//------------------------------------------------------------------------------
G4bool HINDASD::ProcessHits(G4Step* theStep,G4TouchableHistory*)
{//This is called whenever there is a step in a sensitive logical volume

  // Get pointers to useful objects

  const G4StepPoint          *thePreStepPoint       = theStep  -> GetPreStepPoint();
  G4VPhysicalVolume          *PreStepPV             = thePreStepPoint->GetTouchableHandle()->GetVolume();
  G4LogicalVolume            *PreStepLV             = PreStepPV->GetLogicalVolume();
  G4String                    PreStepLVName         = PreStepLV->GetName();

  const G4StepPoint          *thePostStepPoint      = theStep  -> GetPostStepPoint();
  G4VPhysicalVolume          *PostStepPV            = thePostStepPoint->GetTouchableHandle()->GetVolume();
  G4LogicalVolume            *PostStepLV            = PostStepPV->GetLogicalVolume();
  G4String                    PostStepLVName        = PostStepLV->GetName();

  const G4Track              *theTrack              = theStep  -> GetTrack();
  G4TrackStatus               theTrackStatus        = theTrack->GetTrackStatus();
  const G4ParticleDefinition *theParticle           = theTrack -> GetDefinition();
  const G4Material           *theMaterial           = theTrack -> GetMaterial();
  G4int                      TrackID                = theTrack->GetTrackID();
  G4int                      ParentID               = theTrack->GetParentID();
  G4int                      HitStepNumber          = theTrack->GetCurrentStepNumber();
  
  const G4VProcess           *theProcessDefinedStep = (G4VProcess*)(thePostStepPoint -> GetProcessDefinedStep());
  const G4ProcessType         theProcessType        = theProcessDefinedStep -> GetProcessType();
  const G4VProcess           *theCreatorProcess     = theTrack -> GetCreatorProcess();
        G4ProcessType         theCreatorProcessType;
  if( theCreatorProcess )     theCreatorProcessType = theCreatorProcess -> GetProcessType();

  data->AddEnergyDeposited(TString(PreStepLVName.data()),theStep->GetTotalEnergyDeposit());

  /*
  if(TrackID==1)
    {
      //      G4cout<<"  Step #: "<<HitStepNumber<<G4endl;
      G4cout<<"\tParentID:  "<<ParentID<<"\t TrackID:  "<<TrackID<<G4endl;
      G4cout<<"\tPreStep LV:  "<<PreStepLVName.data()<<"\tPostStep LV:  "<<PostStepLVName.data()<<G4endl;
    }
  */
  return true;
}

//-----------------------------------------------------------------------------

void HINDASD::DrawHit(G4ThreeVector position)
{
  G4VVisManager* pVVisManager = G4VVisManager::GetConcreteInstance();
  if(pVVisManager)
  {
    G4Circle circle(position);
    circle.SetScreenSize(2.);
    circle.SetFillStyle(G4Circle::filled);
    G4Colour colour(1.,0.,0.);
    G4VisAttributes attribs(colour);
    circle.SetVisAttributes(attribs);
    pVVisManager->Draw(circle);
  }
}


//------------------------------------------------------------------------------

void HINDASD::EndOfEvent(G4HCofThisEvent* )
{
  //  G4cout<<"Energy Deposited for this Event:  "<<fEDepPerEvent/MeV<<" MeV"<<G4endl;

}
//------------------------------------------------------------------------------


