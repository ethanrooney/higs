//Created by S. Henshaw 3/26/10
//Mostly Copied from geant4/examples/novice/NO2
 
#include "ExperimentConstruction.hh"
#include "DetectorMessenger.hh"

#include "G4Material.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4SubtractionSolid.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4PVParameterised.hh"
#include "G4SDManager.hh"
#include "G4GeometryTolerance.hh"
#include "G4GeometryManager.hh"
#include "G4VSolid.hh"
#include "G4Sphere.hh"
#include "G4Tubs.hh"
#include "G4Polycone.hh"
#include "G4Cons.hh"
#include "G4Trap.hh"
#include "G4Polyhedra.hh"
#include "G4UserLimits.hh"
#include "G4NistManager.hh"
#include "G4FieldManager.hh"
#include "G4VisAttributes.hh"
#include "G4Colour.hh"
#include "G4AssemblyVolume.hh"  
#include "G4Transform3D.hh"
#include "G4ios.hh"

#include "AllMaterials.hh"
#include "HINDACore.hh"
#include "HINDAShield.hh"
#include "HINDAArray.hh"
#include "MoreUnits.hh"
#include "DataManager.hh"
#include "G4UImanager.hh"
#include "TString.h"
#include "G4SystemOfUnits.hh"
#include "G4PhysicalConstants.hh"
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
// ExperimentConstruction::ExperimentConstruction()
// :solidWorld(0),  logicWorld(0),  physiWorld(0),
//  solidTarget(0), logicTarget(0), physiTarget(0), 
//  fWorldLengthX(0.),fWorldLengthY(0.),fWorldLengthZ(0.),  fTargetLength(0.) 
ExperimentConstruction::ExperimentConstruction()
  :solidWorld(0),  logicWorld(0),  physiWorld(0),
   solidCylindricalTarget(0), solidRectangularTarget(0), logicTarget(0), physiTarget(0), 
   fWorldLengthX(0.),fWorldLengthY(0.),fWorldLengthZ(0.), fTargetDiameter(0.0), fTargetLx(0.0), fTargetLy(0.0), fTargetLz(0.0)
{
  fTargetShape = G4String("");
  fTargetMaterialName = G4String("");
  fDetMessenger = new DetectorMessenger(this);
  data=DataManager::GetInstance();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
ExperimentConstruction::~ExperimentConstruction()
{
  delete fDetMessenger;                
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
G4VPhysicalVolume* ExperimentConstruction::Construct()
{
  G4NistManager* manager = G4NistManager::Instance();
  manager->SetVerbose(1);

  static const G4double inch = 2.54*cm;

  //This sets up pointers to all the materials used for this experiment
  GetMaterials(0);
  G4Material* Al = manager->FindOrBuildMaterial("G4_Al"); 
  G4Material* Cu = manager->FindOrBuildMaterial("G4_Cu");
  // liquid deuterium  
  //G4int Z; G4int ncomp; G4int nAtoms; G4double density;
  //G4Element* elD = new G4Element("Deuteron","D", Z=1, 2.014102*g/mole);
  //G4Material* LD2 = new G4Material("Liquid Deuterium", density=16.4*g/cm3, ncomp=1, kStateLiquid, 23*kelvin);
  //LD2->AddElement(elD,nAtoms=2);

  //--------- Definitions of Solids, Logical Volumes, Physical Volumes ---------
  
  //------------------------------ 
  // World
  //------------------------------ 
  G4cout<<"Building Experimental Hall"<<G4endl;
  G4double WorldLength= 30*ft;
  BuildExpHallSquare(Air,WorldLength);
  //BuildExpHallSquare(Vacuum,WorldLength);


  //------------------------------ 
  // HINDA Array 
  //------------------------------ 
  const G4int NDets=8;
  G4String CoreNames[NDets]={"ALAINA","BROOKE","CINDY","JONI","KRISTA","LINDA","ROBERTA","SUSAN"};
  G4String ShieldNames[NDets]={"ANDY","BOBBY","CARL","JACK","KEVIN","LARRY","REGGIE","STEVE"};

  //Do not change these numbers!!
  G4double DetLength[NDets]={10.875,11.375,10.375,12.0,10.625,12.375,10.75,12.375};//Detector Core Length in inches  //Added LSM 08-17-11 based on rough measurements
  G4double Offset[NDets]={3.0,3.0,3.625,2.0,3.375,2.875,3.625,2.75};//Gap between shield and core in inches  //Added LSM 05-19-11

  //For inbeam, set theta angle to 0 for one detector at a time
  G4double RList[NDets]=    {57.996*cm, 58.636*cm, 58.387*cm, 58.430*cm,
			     58.842*cm, 58.207*cm, 58.522*cm, 59.017*cm};//Radius from center of array to front face of lead shield
  G4double ThetaList[NDets]={40.0*deg, 159.0*deg, 125.0*deg, 75.0*deg,
			     145.0*deg, 110.0*deg, 90.0*deg, 55.0*deg};//Polar angle from z axis
  G4double PhiList[NDets]=  {0.0*deg, 180.0*deg, 180.0*deg, 0.0*deg,
			     0.0*deg, 0.0*deg, 180.0*deg, 180.0*deg};//Azimuthial angle from x axis
  //Height above/below beam height,
  //NOTE THE ORDER OF THE CORE NAMES ABOVE!!!
  //these measurements are listed in alphabetical order
  //measured at center of can
  G4double HList[NDets] = {0.0525*in, 0.139*in, 0.054*in, -0.008*in,
			   -0.017*in, 0.093*in, 0.149*in, -0.004*in};

  G4String* core_names = new G4String[NDets];
  for (Int_t i = 0; i < NDets; ++i) {
    core_names[i] = CoreNames[i] + "_l_NaI";
  }

  //ArrayAssembly=new HINDAArray(8,CoreNames, ShieldNames,RList,ThetaList,PhiList);
  ArrayAssembly=new HINDAArray(8,CoreNames, ShieldNames,RList,HList,ThetaList,PhiList,DetLength,Offset);  //Added LSM 05-19-11

  data->SetNumCores(NDets);
  data->SetCoreNamesArray(core_names);

  //Place array in World at 0,0,0 with no rotation
  G4Transform3D CoreTrans=G4Transform3D(G4RotationMatrix(),G4ThreeVector());
  ArrayAssembly->PlaceArray(logicWorld,CoreTrans);


  //Echo what has been done
  G4cout<<" Placed  "<<ArrayAssembly->GetNumHINDAs()<<" HINDA's in World"<<G4endl;
  NumSensitiveVols=ArrayAssembly->GetNumSensitiveVols();
  SDLogVolName=ArrayAssembly->GetSensitiveLogVolNames();
  for(G4int i=0;i<NumSensitiveVols;i++)
    {
      G4cout<<"Sensitive Vol Name:  "<<SDLogVolName[i]<<G4endl;
    }


  //read the setup file macros/HindaSetup.mac
  G4UImanager* UI = G4UImanager::GetUIpointer();
  G4String command = "/control/execute macros/HindaSetup.mac";
  UI->ApplyCommand(command);

  //---------------------------
  // construct the target using settings in macros/HindaSetup.mac
  //--------------------------- 

  //get target material
  if(!fTargetMaterialName)
    {
      G4cerr << "ExperimentConstruction::Construct() Target material not specified. See macros/HindaSetup.mac" << G4endl; 
      exit(1);
    }
  else fTargetMaterial=(G4Material*)AllMaterials::GetMaterial((G4String)fTargetMaterialName);
  
  //construct the target
  // if(!fTargetShape)
  //   {
  //     G4cerr << "ExperimentConstruction::Construct() Target shape not specified. See macros/HindaSetup.mac" << G4endl; 
  //     exit(1);
  //   }

  // if(fTargetShape == "Cylinder")
  //   {
  //     BuildCylindricalTarget();
  //     G4cout << "Building cylindrical target" << G4endl;
  //   }

  // else if(fTargetShape == "Rectangle")
  //   {
  //     BuildRectangularTarget();
  //     G4cout << "Building rectangular target" << G4endl;
  //   }

  // else if(fTargetShape == "NoTarget")
  //   {
  //     G4cout << "*******No target constructed!*******" << G4endl;
  //   }

  // else
  //   {
  //     G4cerr << "ExperimentConstruction::Construct() Target shape does not exist. See macros/HindaSetup.mac" << G4endl;
  //     exit(1);
  //   }
  fTargetShape = "cryo";
  // ************ cryogenic target *********************

  //liquid deuterium target 
  G4RotationMatrix* yRot = new G4RotationMatrix();
  yRot->rotateY(180*deg);
  G4RotationMatrix* tgtRot = new G4RotationMatrix();
  tgtRot->rotateY(180*deg);//put back!
  tgtRot->rotateX(-0.728*deg);// put back!
    
  G4bool target_exist = true;
  solidLD2target = new G4Cons("LD2target",
			      0.,0.792*inch,  //inner and outer radii of the small end of target 
			      0.,1.068*inch,  //inner and outer radii of the large end of target
			      10*cm ,            //half length of target cell
			      0*deg,360*deg); 
  
  
  logicLD2target = new G4LogicalVolume(solidLD2target,	//its solid
				       fTargetMaterial,	
				       "LD2target",0,0,0);	//its name
  
  physiTarget = new G4PVPlacement(tgtRot,			//rotation
  				  G4ThreeVector(0,0, 0.024*inch),	// position, offset z by 0.024*inch
  				  "LD2target",	//its name
  				  logicLD2target,	//its logical volume
  				  physiWorld,	//its mother  volume
  				  false,		//no boolean operation
  				  0,
  				  true);		//copy number.


  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  //                                      Environment begin
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  // target chamber
  G4bool targettub_exist = true;
  
  solidCham = new G4Cons("targetchamber",
			 0.792*inch,0.797*inch,  //inner and outer radii of the small end of target cell
			 1.068*inch,1.073*inch,  //inner and outer radii of the large end of target cell
			 10*cm ,            //half length of target cell
			 0*deg,360*deg); 
  
  logicCham = new G4LogicalVolume(solidCham,	//its solid
				  Kapton,	//Material_Kapton
				  "targetchamber",0,0,0);	//its name
  
  // physiCham = new G4PVPlacement(tgtRot,			//rotation
  // 				G4ThreeVector(0,0, 0.024*inch),	
  // 				"targetchamber",	//its name
  // 				logicCham,	//its logical volume
  // 				physiWorld,	//its mother  volume
  // 				false,		//no boolean operation
  // 				0,
  // 				true);		//copy number.
  

  //all other surroundings besides target chamber
  G4bool environment_exist = true;//true;
  G4bool frontcap_exist = true;
  
  solidFrontCap = new G4Tubs("frontcap",
			     0., 1.068*inch,
			     0.0025*inch ,            //half thickness of the cap
			     0*deg,360*deg); 
  
  logicFrontCap = new G4LogicalVolume(solidFrontCap,	//its solid
				      Kapton,	//Material_Kapton
				      "frontcap",0,0,0);	//its name
  
  // physiFrontCap = new G4PVPlacement(tgtRot,			//rotation
  // 				    G4ThreeVector(0,0,-10.*cm+0.024*inch),//displacement along axial direction
  // 				    "frontcap",	//its name
  // 				    logicFrontCap,	//its logical volume
  // 				    physiWorld,	//its mother  volume
  // 				    false,		//no boolean operation
  // 				    0,
  // 				    true);		//copy number.
  

  G4bool backcap_exist = true;

  solidBackCap = new G4Tubs("backcap",
			    0., 0.792 *inch,
			    0.0025*inch ,            //half thickness of the cap
			    0*deg,360*deg); 
  
  logicBackCap = new G4LogicalVolume(solidBackCap,	//its solid
				     Kapton,	//Material_Kapton
				     "backcap",0,0,0);	//its name
  
  // physiBackCap = new G4PVPlacement(tgtRot,			//rotation
  // 				   G4ThreeVector(0,0,10.*cm+0.024*inch),//displacement along axial direction
  // 				   "backcap",	//its name
  // 				   logicBackCap,	//its logical volume
  // 				   physiWorld,	//its mother  volume
  // 				   false,		//no boolean operation
  // 				   0,
  // 				   true);		//copy number.
    
  // create assembly of target, chamber, front cap, back cap
  G4AssemblyVolume* assemblyTarget = new G4AssemblyVolume();
  G4Transform3D TransformTgt = G4Transform3D(G4RotationMatrix(), G4ThreeVector());
  assemblyTarget->AddPlacedVolume(logicCham, TransformTgt);
  G4Transform3D TransformFront = G4Transform3D(G4RotationMatrix(), G4ThreeVector(0, 0, 10.0 * cm));
  assemblyTarget->AddPlacedVolume(logicFrontCap, TransformFront);
  G4Transform3D TransformBack = G4Transform3D(G4RotationMatrix(), G4ThreeVector(0, 0, -10.0 * cm));
  assemblyTarget->AddPlacedVolume(logicBackCap, TransformBack);
  //assemblyTarget->AddPlacedVolume(logicLD2target, TransformTgt);
  G4Transform3D TransformAssembly = G4Transform3D(*tgtRot, G4ThreeVector(0,0,0.024*inch));
  assemblyTarget->MakeImprint(logicWorld, TransformAssembly, 0, false);

 
  //  //target window ring
  G4int nmbRZ = 11;
  G4double r[] = {2.687*cm,3.197*cm,3.197*cm,2.604*cm,2.604*cm,3.197*cm,3.197*cm,2.37*cm,2.37*cm,2.687*cm,2.687*cm};
  G4double z[] = {0*cm,0.559*cm,1.969*cm,1.969*cm,2.54*cm,2.54*cm,2.794*cm,2.794*cm,1.788*cm,1.788*cm,0*cm};

  G4bool targetwindowring_exist = true;

  if(targetwindowring_exist){
    solidRing = new G4Polycone("targetring",
			       0*deg,360*deg,
			       nmbRZ,r,z);

    logicRing = new G4LogicalVolume(solidRing,				   
				    Al,   //Material_Aluminum
				    "targetring",0,0,0);

    physiRing = new G4PVPlacement(yRot,      // rotation
				  G4ThreeVector(0,0,-10.*cm),   //displacement along axial direction
				  "targetring",logicRing,physiWorld,false,0,true);
  }



  //----------------------------------
  //Thermal Radiation Shields (Alum)
  //----------------------------------
  //  //4K thermal shield 
  G4RotationMatrix* xRot = new G4RotationMatrix();
  xRot->rotateX(90*deg);

  G4bool thermalshield4K_exist = true;

  if(thermalshield4K_exist){
    solidThermalShield4K = new G4Tubs("ThermalShield4K",
				      6.96*inch,7*inch,   //inner and outer radii of the shield
				      6*inch,             //half length of the shield
				      0*deg,360*deg);

    logicThermalShield4K = new G4LogicalVolume(solidThermalShield4K,
					       Al,        //Material_Aluminum
					       "ThermalShield4K",0,0,0);

    physiThermalShield4K = new G4PVPlacement(xRot,        //rotation
					     G4ThreeVector(0,3*inch,0),   //displacement along axial direction
					     "ThermalShield4K",logicThermalShield4K,physiWorld,false,0,true);
  
    solidThermalShield4K_top_plate = new G4Tubs("ThermalShield4K_top_plate",
						0*inch,7*inch,   //inner and outer radii of the top cover plate
						0.1875*inch,     //half thickness of the top cover plate
						0*deg,360*deg);

    logicThermalShield4K_top_plate = new G4LogicalVolume(solidThermalShield4K_top_plate,
							 Cu,     //Material_Copper
							 "ThermalShield4K_top_plate",0,0,0);

    physiThermalShield4K_top_plate = new G4PVPlacement(xRot,     //rotation
						       G4ThreeVector(0,9.1875*inch,0),   //displacement along axial direction
						       "ThermalShield4K_top_plate",logicThermalShield4K_top_plate,physiWorld,false,0,true);

    solidThermalShield4K_end_plate = new G4Tubs("ThermalShield4K_end_plate",
						0*inch,7*inch,   //inner and outer radii of the end cover plate
						0.02*inch,       //half thickness of the the end cover plate
						0*deg,360*deg);

    logicThermalShield4K_end_plate = new G4LogicalVolume(solidThermalShield4K_end_plate,
							 Al,     //Material_Aluminum
							 "ThermalShield4K_end_plate",0,0,0);

    physiThermalShield4K_end_plate = new G4PVPlacement(xRot,     //rotation
						       G4ThreeVector(0,-3.02*inch,0),    //displacement along axial direction
						       "ThermalShield4K_end_plate",logicThermalShield4K_end_plate,physiWorld,false,0,true);
  }

  G4bool viewwindow1_exist = false;

  if(viewwindow1_exist){
    solidViewWindow1F = new G4Tubs("window1front",
				   0., 1.0*inch,
				   0.02*inch ,            //half thickness of the kapton window
				   0*deg,360*deg); 
    logicViewWindow1F = new G4LogicalVolume(solidViewWindow1F,	//its solid
					    Kapton,	//Material_Kapton
					    "window1front",0,0,0);	//its name
    physiViewWindow1F = new G4PVPlacement(yRot,			//rotation
					  G4ThreeVector(0,0,-6.96*inch),  	//displacement along axial direction
					  "window1front",	//its name
					  logicViewWindow1F,	//its logical volume
					  physiWorld,	//its mother  volume
					  false,		//no boolean operation
					  0,
					  true);		//copy number.

    solidViewWindow1B = new G4Tubs("window1back",
				   0., 1.0*inch,
				   0.02*inch ,            //half thickness of the kapton window
				   0*deg,360*deg); 
    logicViewWindow1B = new G4LogicalVolume(solidViewWindow1B,	//its solid
					    Kapton,	//Material_Kapton
					    "window1back",0,0,0);	//its name
    physiViewWindow1B = new G4PVPlacement(yRot,			//rotation
					  G4ThreeVector(0,0,6.98*inch),  	//displacement along axial direction
					  "window1back",	//its name
					  logicViewWindow1B,	//its logical volume
					  physiWorld,	//its mother  volume
					  false,		//no boolean operation
					  0,
					  true);		//copy number.
  }

  //  //77K thermal shield 
  G4bool thermalshield77K_exist = true;

  if(thermalshield77K_exist){
    solidThermalShield77K = new G4Tubs("ThermalShield77K",
				       7.96*inch,8*inch,   //inner and outer radii of the shield
				       11*inch,       //half length of the shield
				       0*deg,360*deg);

    logicThermalShield77K = new G4LogicalVolume(solidThermalShield77K,					      
						Al,
						"ThermalShield77K",0,0,0);

    physiThermalShield77K = new G4PVPlacement(xRot,
					      G4ThreeVector(0,4*inch,0),
					      "ThermalShield77K",logicThermalShield77K,physiWorld,false,0,true);

    solidThermalShield77K_top_plate = new G4Tubs("ThermalShield77K_top_plate",
						 0*inch,8*inch,   //inner and outer radii of the top cover plate
						 0.1875*inch,     //half thickness of the top cover plate
						 0*deg,360*deg);

    logicThermalShield77K_top_plate = new G4LogicalVolume(solidThermalShield77K_top_plate,
							  Al,     //Material_Aluminum
							  "ThermalShield77K_top_plate",0,0,0);

    physiThermalShield77K_top_plate = new G4PVPlacement(xRot,
							G4ThreeVector(0,15.1875*inch,0),
							"ThermalShield77K_top_plate",logicThermalShield77K_top_plate,physiWorld,false,0,true);


    solidThermalShield77K_end_plate = new G4Tubs("ThermalShield77K_end_plate",
						 0*inch,8*inch,   //inner and outer radii of the end cover plate
						 0.02*inch,       //half thickness of the end cover plate
						 0*deg,360*deg);

    logicThermalShield77K_end_plate = new G4LogicalVolume(solidThermalShield77K_end_plate,
							  Al,     //Material_Aluminum
							  "ThermalShield77K_end_plate",0,0,0);

    physiThermalShield77K_end_plate = new G4PVPlacement(xRot,
							G4ThreeVector(0,-7.02*inch,0),
							"ThermalShield77K_end_plate",logicThermalShield77K_end_plate,physiWorld,false,0,true);
  }

  G4bool viewwindow2_exist = false;

  if(viewwindow2_exist){
    solidViewWindow2F = new G4Tubs("window2front",
				   0., 1.0*inch,
				   0.02*inch ,            //half thickness of the kapton window
				   0*deg,360*deg); 
    logicViewWindow2F = new G4LogicalVolume(solidViewWindow2F,	//its solid
					    Kapton,	//Material_Kapton
					    "window2front",0,0,0);	//its name
    physiViewWindow2F = new G4PVPlacement(yRot,			//rotation
					  G4ThreeVector(0,0,-7.98*inch),  	//displacement along axial direction
					  "window2front",	//its name
					  logicViewWindow2F,	//its logical volume
					  physiWorld,	//its mother  volume
					  false,		//no boolean operation
					  0,
					  true);		//copy number.

    solidViewWindow2B = new G4Tubs("window2back",
				   0., 1.0*inch,
				   0.02*inch ,            //half thickness of the kapton window
				   0*deg,360*deg); 
    logicViewWindow2B = new G4LogicalVolume(solidViewWindow2B,	//its solid
					    Kapton,	//Material_Kapton
					    "window2back",0,0,0);	//its name
    physiViewWindow2B = new G4PVPlacement(yRot,			//rotation
					  G4ThreeVector(0,0,7.98*inch),  	//displacement along axial direction
					  "window2back",	//its name
					  logicViewWindow2B,	//its logical volume
					  physiWorld,	//its mother  volume
					  false,		//no boolean operation
					  0,
					  true);		//copy number.
  }

  //  //outermost thermal shield 
  G4bool thermalshieldRT_exist = true;

  if(thermalshieldRT_exist){
    solidThermalShieldRT = new G4Tubs("ThermalShieldRT",
				      8.96*inch,9*inch,   //inner and outer radii of the shield
				      14*inch,             //half length of the shield
				      0*deg,360*deg);

    logicThermalShieldRT = new G4LogicalVolume(solidThermalShieldRT,
					       Al,
					       "ThermalShieldRT",0,0,0);

    physiThermalShieldRT = new G4PVPlacement(xRot,
					     G4ThreeVector(0,6*inch,0),
					     "ThermalShieldRT",logicThermalShieldRT,physiWorld,false,0,true);

    solidThermalShieldRT_top_plate = new G4Tubs("ThermalShieldRT_top_plate",
						0*inch,9*inch,   //inner and outer radii of the top cover plate
						0.375*inch,     //half thickness of the top cover plate
						0*deg,360*deg);

    logicThermalShieldRT_top_plate = new G4LogicalVolume(solidThermalShieldRT_top_plate,
							 Al,     //Material_Aluminum
							 "ThermalShieldRT_top_plate",0,0,0);

    physiThermalShieldRT_top_plate = new G4PVPlacement(xRot,
						       G4ThreeVector(0,20.375*inch,0),
						       "ThermalShieldRT_top_plate",logicThermalShieldRT_top_plate,physiWorld,false,0,true);


    solidThermalShieldRT_end_plate = new G4Tubs("ThermalShieldRT_end_plate",
						0*inch,9*inch,   //inner and outer radii of the end cover plate
						0.25*inch,       //half thickness of the end cover plate
						0*deg,360*deg);

    logicThermalShieldRT_end_plate = new G4LogicalVolume(solidThermalShieldRT_end_plate,
							 Al,     //Material_Aluminum
							 "ThermalShieldRT_end_plate",0,0,0);

    physiThermalShieldRT_end_plate = new G4PVPlacement(xRot,
						       G4ThreeVector(0,-8.25*inch,0),
						       "ThermalShieldRT_end_plate",logicThermalShieldRT_end_plate,physiWorld,false,0,true);
  }

  G4bool viewwindow3_exist = true;//false;

  if(viewwindow3_exist){
    solidViewWindow3F = new G4Tubs("window3front",
				   0., 1.0*inch,
				   0.02*inch ,            //half thickness of the kapton window
				   0*deg,360*deg); 
    logicViewWindow3F = new G4LogicalVolume(solidViewWindow3F,	//its solid
					    Kapton,	//Material_Kapton
					    "window3front",0,0,0);	//its name
    physiViewWindow3F = new G4PVPlacement(yRot,			//rotation
					  G4ThreeVector(0,0,-8.98*inch),  	//displacement along axial direction
					  "window3front",	//its name
					  logicViewWindow3F,	//its logical volume
					  physiWorld,	//its mother  volume
					  false,		//no boolean operation
					  0,
					  true);		//copy number.

    solidViewWindow3B = new G4Tubs("window3back",
				   0., 1.0*inch,
				   0.02*inch ,            //half thickness of the kapton window
				   0*deg,360*deg); 
    logicViewWindow3B = new G4LogicalVolume(solidViewWindow3B,	//its solid
					    Kapton,	//Material_Kapton
					    "window3back",0,0,0);	//its name
    physiViewWindow3B = new G4PVPlacement(yRot,			//rotation
					  G4ThreeVector(0,0,8.98*inch),  	//displacement along axial direction
					  "window3back",	//its name
					  logicViewWindow3B,	//its logical volume
					  physiWorld,	//its mother  volume
					  false,		//no boolean operation
					  0,
					  true);		//copy number.
  }

   
  
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  //                                      Environment end
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  //visualization
  G4VisAttributes* TargetVisAtt= new G4VisAttributes(G4Colour::Yellow());
  TargetVisAtt->SetVisibility(true);
  TargetVisAtt->SetForceSolid(true);
  logicLD2target  ->SetVisAttributes(TargetVisAtt);
  G4VisAttributes* ChamVisAtt= new G4VisAttributes(G4Colour::Magenta());
  ChamVisAtt->SetVisibility(true);
  ChamVisAtt->SetForceSolid(true);
  logicCham->SetVisAttributes(ChamVisAtt);
  logicFrontCap->SetVisAttributes(ChamVisAtt);
  logicBackCap->SetVisAttributes(ChamVisAtt);
  //logicThermalShield77K->SetVisAttributes(TargetVisAtt);  


  SetDataPhysicalSetup();
  
  return physiWorld;
}
/******************************************************************************************/
/******************************************************************************************/
/***************User Defined Function to Build the Experimental Hall***********************/
/******************************************************************************************/
/******************************************************************************************/

void ExperimentConstruction::BuildExpHall(G4Material* mat,G4double XLength, G4double YLength, G4double ZLength)
{
  ExpHallMaterial=mat;
  fWorldLengthX=XLength;
  fWorldLengthY=YLength;
  fWorldLengthZ=ZLength;
  

  solidWorld= new G4Box("sWorld",XLength/2.0,YLength/2.0,ZLength/2.0);
  logicWorld= new G4LogicalVolume( solidWorld, ExpHallMaterial, "lWorld", 0, 0, 0);
  
  //  Must place the World Physical volume unrotated at (0,0,0).
  physiWorld = new G4PVPlacement(0,               // no rotation
                                 G4ThreeVector(), // at (0,0,0)
                                 logicWorld,      // its logical volume
				 "pWorld",         // its name
                                 0,               // its mother  volume
                                 false,           // no boolean operations
                                 0,               //copy number
				 true);              // Check overlaps

  G4VisAttributes* ExpHallVisAtt= new G4VisAttributes(G4Colour::Grey());
  ExpHallVisAtt->SetVisibility(true);
  ExpHallVisAtt->SetForceWireframe(true);
  logicWorld  ->SetVisAttributes(ExpHallVisAtt);  

}

void ExperimentConstruction::BuildExpHallSquare(G4Material* mat,G4double Length)
{
  ExpHallMaterial=mat;
  fWorldLengthX=Length;
  fWorldLengthY=Length;
  fWorldLengthZ=Length;


  solidWorld= new G4Box("sWorld",fWorldLengthX/2.0,fWorldLengthY/2.0,fWorldLengthZ/2.0);
  logicWorld= new G4LogicalVolume( solidWorld, ExpHallMaterial, "lWorld", 0, 0, 0);
  
  //  Must place the World Physical volume unrotated at (0,0,0).
  physiWorld = new G4PVPlacement(0,               // no rotation
                                 G4ThreeVector(), // at (0,0,0)
                                 logicWorld,      // its logical volume
				 "pWorld",         // its name
                                 0,               // its mother  volume
                                 false,           // no boolean operations
                                 0,               //copy number
				 true);              // Check overlaps

  G4VisAttributes* ExpHallVisAtt= new G4VisAttributes(G4Colour::Grey());
  ExpHallVisAtt->SetVisibility(true);
  ExpHallVisAtt->SetForceWireframe(true);
  logicWorld  ->SetVisAttributes(ExpHallVisAtt);  

}


void ExperimentConstruction::GetMaterials(G4int PrintOption)
{
  //--------- Material definition ---------
  //Only Put the Materials used in this particular setup. 
  new AllMaterials; //Defines all the elements and materials
  Air    = AllMaterials::GetMaterial("Air"); //Air
  Pb     = AllMaterials::GetMaterial("Lead");//Lead
  PVC    = AllMaterials::GetMaterial("G4_POLYVINYL_CHLORIDE");//PVC
  Vacuum = AllMaterials::GetMaterial("Vacuum");//Vacuum
  Bi     = AllMaterials::GetMaterial("Bismuth");//Bismuth-209
  Concrete = AllMaterials::GetMaterial("G4_CONCRETE");//From Geant Standard lib
  Kapton = AllMaterials::GetMaterial("G4_KAPTON");//From Geant Standard lib
 
}

void ExperimentConstruction:: BuildBeamPipe(G4Material* matInner, G4Material* matShell,G4Material* matWindow,
					    G4double InsideDiameter,G4double OutsideDiameter,
					    G4double WindowThickness,G4double Length,
					    G4double WorldPosX,G4double WorldPosY,G4double WorldPosZ)
{
  G4double pipeLength=Length;
  G4ThreeVector positionPipe = G4ThreeVector(WorldPosX,WorldPosY,WorldPosZ);//Position of Center of Pipe

  G4Tubs *sWindow=new G4Tubs("sWindow",0.0*cm,InsideDiameter/2.0,WindowThickness/2.0,0,360);
  G4LogicalVolume *lWindow=new G4LogicalVolume(sWindow,matWindow,"lWindow",0,0,0);

  

  solidBeamPipeShell = new G4Tubs("sBPShell",  //name
			     0,
			     OutsideDiameter/2.0,  //rmax
			     pipeLength/2.0,//z halfsize
			     0,
			     360); 
  
  solidBeamPipeInner = new G4Tubs("sBPInner",  //name
				  0.0 *cm,  //rmin
				  InsideDiameter/2.0,  //rmax
				  (pipeLength-2.0*WindowThickness)/2.0,//z halfsize
				  0,
				  360); 
  

  logicBeamPipeShell = new G4LogicalVolume(solidBeamPipeShell,matShell,"lBPShell",0,0,0);
  logicBeamPipeInner = new G4LogicalVolume(solidBeamPipeInner,matInner,"lBPInner",0,0,0);


  physiBeamPipeInner = new G4PVPlacement(0,               // no rotation
					 G4ThreeVector(),  // at (x,y,z)
					 logicBeamPipeInner,     // its logical volume				  
					 "pBPInner",        // its name
					 logicBeamPipeShell,      // its mother  volume
					 true,           // no boolean operations
					 0,     //copy number
					 true);       // Check Overlap 



  physiBeamPipeShell = new G4PVPlacement(0,               // no rotation
					 positionPipe,  // at (x,y,z)
					 logicBeamPipeShell,     // its logical volume				  
					 "pBPShell",        // its name
					 logicWorld,      // its mother  volume
					 true,           // no boolean operations
					 0,  //copy number
					 true);         //check overlap 
  physiWindow1=new G4PVPlacement(0,               // no rotation
				  G4ThreeVector(0.,0.,pipeLength/2.0-(WindowThickness/2.0)),  // at (x,y,z)
				  lWindow,     // its logical volume				  
				  "pWindow1",        // its name
				  logicBeamPipeShell,      // its mother  volume
				  true,           // no boolean operations
				  0,  //copy number
				  true);         //check overlap 

  physiWindow2=new G4PVPlacement(0,               // no rotation
				  G4ThreeVector(0.,0.,-pipeLength/2.0+(WindowThickness/2.0)),  // at (x,y,z)
				  lWindow,     // its logical volume				  
				  "pWindow2",        // its name
				  logicBeamPipeShell,      // its mother  volume
				  true,           // no boolean operations
				  0,  //copy number
				  true);         //check overlap 

  G4Colour transOrange=G4Colour(1.,1.0,0.0,1);
  G4VisAttributes* BeamPipeShellVisAtt= new G4VisAttributes(transOrange);
  BeamPipeShellVisAtt->SetForceWireframe(true);
  logicBeamPipeShell->SetVisAttributes(BeamPipeShellVisAtt);

  G4VisAttributes* BeamPipeInnerVisAtt= new G4VisAttributes(G4Colour::Cyan());
  BeamPipeInnerVisAtt->SetForceSolid(true);
  logicBeamPipeInner->SetVisAttributes(BeamPipeInnerVisAtt);

  G4VisAttributes* WindowVisAtt= new G4VisAttributes(G4Colour::Yellow());
  WindowVisAtt->SetForceSolid(true);
  lWindow->SetVisAttributes(WindowVisAtt);

  

}

void ExperimentConstruction::BuildUTRWall(G4double thickness,G4double BeamHoleDiameter)
{
  
  solidUTRWall=new G4Box("sUTRWall",fWorldLengthX/2.0,fWorldLengthY/2.0,thickness/2.0);

  G4Tubs* solidBeamHole=new G4Tubs("BeamHole",0,BeamHoleDiameter/2.0,thickness,0,twopi);

  WallandHole=new G4SubtractionSolid("Box-Cylinder",solidUTRWall,solidBeamHole);


  logicUTRWall=new G4LogicalVolume(WallandHole,Concrete,"lUTRWall",0,0,0);
  physiUTRWall=new G4PVPlacement(0,               // no rotation
                                 G4ThreeVector(0,0,-fWorldLengthZ/2.0+thickness/2.0+300*cm), // at (0,0,0)
                                 logicUTRWall,      // its logical volume
				 "pUTRWall",         // its name
                                 logicWorld,               // its mother  volume
                                 false,           // no boolean operations
                                 0,               //copy number
				 true);              // Check overlaps

  G4VisAttributes* UTRWallVisAtt= new G4VisAttributes(G4Colour::Grey());
  UTRWallVisAtt->SetVisibility(true);
  UTRWallVisAtt->SetForceSolid(true);
  logicUTRWall  ->SetVisAttributes(UTRWallVisAtt);  
  

}

void ExperimentConstruction::BuildCylindricalTarget()
{
  //Solid for Target
  solidCylindricalTarget=new G4Tubs("solidCylindricalTarget",0,0.5*fTargetDiameter,0.5*fTargetLz,0,twopi);

  //Logical Volume for Target
  logicTarget=new G4LogicalVolume(solidCylindricalTarget,fTargetMaterial,"CylindricalTarget",0,0,0);
  
  //Placing Target in the World
  G4ThreeVector fTargetAngle=G4ThreeVector(0,fTargetTheta,fTargetPhi);
  G4RotationMatrix *fTargetRot=new G4RotationMatrix();
  fTargetRot->rotateX(fTargetAngle.x());
  fTargetRot->rotateY(fTargetAngle.y());
  fTargetRot->rotateZ(fTargetAngle.z());

  physiTarget=new G4PVPlacement(fTargetRot,
				G4ThreeVector(0.,0.,0.),
				logicTarget,
				"physiTarget",
				logicWorld,
				false,
				0,
				true);

  G4VisAttributes* TargetVisAtt= new G4VisAttributes(G4Colour::Yellow());
  TargetVisAtt->SetVisibility(true);
  TargetVisAtt->SetForceSolid(true);
  logicTarget  ->SetVisAttributes(TargetVisAtt);  

}

void ExperimentConstruction::BuildRectangularTarget()
{
  //Solid for Target
  solidRectangularTarget=new G4Box("solidRectangularTarget",0.5*fTargetLx,0.5*fTargetLy,0.5*fTargetLz);

  //Logical Volume for Target
  logicTarget=new G4LogicalVolume(solidRectangularTarget,fTargetMaterial,"RectangularTarget",0,0,0);
  
  //Placing Target in the World
  G4ThreeVector fTargetAngle=G4ThreeVector(0,fTargetTheta,fTargetPhi);
  G4RotationMatrix *fTargetRot=new G4RotationMatrix();
  fTargetRot->rotateX(fTargetAngle.x());
  fTargetRot->rotateY(fTargetAngle.y());
  fTargetRot->rotateZ(fTargetAngle.z());

  physiTarget=new G4PVPlacement(fTargetRot,
				G4ThreeVector(0.,0.,0.),
				logicTarget,
				"physiTarget",
				logicWorld,
				false,
				0,
				true);

  G4VisAttributes* TargetVisAtt= new G4VisAttributes(G4Colour::Yellow());
  TargetVisAtt->SetVisibility(true);
  TargetVisAtt->SetForceSolid(true);
  logicTarget->SetVisAttributes(TargetVisAtt);  

}


void ExperimentConstruction::SetDataPhysicalSetup()
{//This sends experimental setup values to the Data Manager class which will write them at 
  //the end of run action
  data->SetWorldLengthX(fWorldLengthX);
  data->SetWorldLengthY(fWorldLengthY);
  data->SetWorldLengthZ(fWorldLengthZ);

  //Sending Names of Logical Volumes to DataManger to setup Branches
  data->SetNumSensitiveVols(NumSensitiveVols);
  data->SetSensitiveLogVolNames(SDLogVolName);


}
